#!/usr/bin/env python
#-*- coding:utf-8 -*-

import os
import sys
import urlparse
import json
import thread

from urlparse import urlparse, parse_qs

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from SocketServer import ThreadingMixIn

from subprocess import call

import logging
import logging.handlers
logging.basicConfig()
logger = logging.getLogger('webhookhandler')
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.INFO)

ADDRESS = "0.0.0.0"
PORT = 8141
server_version = "PuppetMasterWebHookHandler/0.3"

class HookHandler(BaseHTTPRequestHandler):
    """
    Handles post requests
    """
    def do_POST(self):
        """
        Sends a 200 to the client and starts a new thread to
        execute the proper hook function
        """

        # Get the length of the post data
        content_len = int(self.headers.getheader('content-length', 0))
        # Read the post data
        post_body = self.rfile.read(content_len)
        # Load the post data from its json form to a dict
        post_body = json.loads(post_body)

        # If this is a Stash/BitBucket webhook...
        if 'refChanges' in post_body:
            branch = self.handle_stash_webhook(post_body)

        # If this is a GOGS webhook...
        elif 'refs' in post_body and 'secret' in post_body:
            branch = self.handle_gogs_webhook(post_body)

        else:
            self.send_response(400)
            self.end_headers()
            self.wfile.write('%s\n' % json.dumps({ 'detail': 'No attributes we can use to detect request format.' }))
            return

        # Start a thread to deal with the received hook
        thread.start_new_thread(hook_received, (post_body, branch))

        # Send the client a success reponse
        if branch is not None:
            self.send_response(200)
            self.end_headers()
            self.wfile.write('\n')
        return

    def handle_stash_webhook(self, post_body):
        # Determine the branch being pushed to
        refparts = post_body['refChanges'][0]['refId'].split('/')
        if refparts[0] != 'refs' or refparts[1] != 'heads':
            self.send_response(400)
            self.end_headers()
            self.wfile.write('%s\n' % json.dumps({ 'detail': 'Not a head we recognise.' }))
            return None
        return refparts[2]

    def handle_gogs_webhook(self, post_body):
        # Check secret key matches
        secret = post_body['secret']
        if secret != os.environ['WEBHOOK_TOKEN']:
            self.send_response(401)
            self.end_headers()
            self.wfile.write('%s\n' % json.dumps({ 'detail': 'Invalid secret token.' }))
            return None

        # Determine the branch being pushed to
        refparts = post_body['ref'].split('/')
        if refparts[0] != 'refs' or refparts[1] != 'heads':
            self.send_response(400)
            self.end_headers()
            self.wfile.write('%s\n' % json.dumps({ 'detail': 'Not a head we recognise.' }))
            return None
        return refparts[2]

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """Handle requests in a separate thread."""

def hook_received(hook, branch):
    """
    Calls the hook function in the file hooks.py
    """

    logger.info("Webhook processing push message for %s" % branch)
    #exec_hook = getattr(hooks, hook["object_kind"])
    #exec_hook = hook["object_kind"]
    # Call the function and pass it the hook
    #return exec_hook(hook)
    return push(branch)

def start(port=PORT, address=ADDRESS):
    """
    Starts the webserver
    """
    logger.info("Webhook server starts - %s:%s" % (address, port))
    server = ThreadedHTTPServer((address, port), HookHandler)
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass
    server.server_close()
    logger.info("Webhook service stops.")

def push(branch):
    logger.info("Triggering redeploy.")
    exitcode = call(["sudo", "-H", "-E", "/usr/local/bin/puppetmaster-deployfiles", branch])
    if exitcode != 0:
        logger.error("Deployment failed, exitcode: %d" % exitcode)
        return

def main():
    """
    Starts the webserver, first argument is port number, default is 9898
    """
    port = PORT
    if len(sys.argv) > 1:
        port = sys.argv[1]
    start(port)

if __name__ == '__main__':
    main()
